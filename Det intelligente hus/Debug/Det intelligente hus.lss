
Det intelligente hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000008a0  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800208  00800208  0000093c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001024  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dfe  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000660  00000000  00000000  0000286e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f0  00000000  00000000  000036f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000039e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	99 01       	movw	r18, r18
  e6:	c9 01       	movw	r24, r18
  e8:	c9 01       	movw	r24, r18
  ea:	c9 01       	movw	r24, r18
  ec:	a5 01       	movw	r20, r10
  ee:	c9 01       	movw	r24, r18
  f0:	b1 01       	movw	r22, r2
  f2:	bd 01       	movw	r22, r26
  f4:	c9 01       	movw	r24, r18
  f6:	c9 01       	movw	r24, r18
  f8:	c9 01       	movw	r24, r18
  fa:	c9 01       	movw	r24, r18
  fc:	c9 01       	movw	r24, r18
  fe:	c9 01       	movw	r24, r18
 100:	c9 01       	movw	r24, r18
 102:	c9 01       	movw	r24, r18
 104:	c9 01       	movw	r24, r18
 106:	c9 01       	movw	r24, r18
 108:	c9 01       	movw	r24, r18
 10a:	c9 01       	movw	r24, r18
 10c:	c9 01       	movw	r24, r18
 10e:	c9 01       	movw	r24, r18
 110:	c9 01       	movw	r24, r18
 112:	c9 01       	movw	r24, r18
 114:	c9 01       	movw	r24, r18
 116:	c9 01       	movw	r24, r18
 118:	c9 01       	movw	r24, r18
 11a:	c9 01       	movw	r24, r18
 11c:	c9 01       	movw	r24, r18
 11e:	c9 01       	movw	r24, r18
 120:	c9 01       	movw	r24, r18
 122:	c9 01       	movw	r24, r18
 124:	c9 01       	movw	r24, r18
 126:	c9 01       	movw	r24, r18
 128:	c9 01       	movw	r24, r18
 12a:	c9 01       	movw	r24, r18
 12c:	c9 01       	movw	r24, r18
 12e:	c9 01       	movw	r24, r18
 130:	c9 01       	movw	r24, r18
 132:	c9 01       	movw	r24, r18
 134:	c9 01       	movw	r24, r18
 136:	c9 01       	movw	r24, r18
 138:	c9 01       	movw	r24, r18
 13a:	c9 01       	movw	r24, r18
 13c:	c9 01       	movw	r24, r18
 13e:	c9 01       	movw	r24, r18
 140:	c9 01       	movw	r24, r18
 142:	c9 01       	movw	r24, r18
 144:	c9 01       	movw	r24, r18
 146:	c9 01       	movw	r24, r18
 148:	c9 01       	movw	r24, r18
 14a:	c9 01       	movw	r24, r18
 14c:	c9 01       	movw	r24, r18
 14e:	c9 01       	movw	r24, r18
 150:	c9 01       	movw	r24, r18
 152:	c9 01       	movw	r24, r18
 154:	c9 01       	movw	r24, r18
 156:	c9 01       	movw	r24, r18
 158:	c9 01       	movw	r24, r18
 15a:	c9 01       	movw	r24, r18
 15c:	c9 01       	movw	r24, r18
 15e:	c9 01       	movw	r24, r18
 160:	c9 01       	movw	r24, r18
 162:	c9 01       	movw	r24, r18
 164:	9c 01       	movw	r18, r24
 166:	c9 01       	movw	r24, r18
 168:	c9 01       	movw	r24, r18
 16a:	c9 01       	movw	r24, r18
 16c:	a8 01       	movw	r20, r16
 16e:	c9 01       	movw	r24, r18
 170:	b4 01       	movw	r22, r8
 172:	c0 01       	movw	r24, r0
 174:	c9 01       	movw	r24, r18
 176:	c9 01       	movw	r24, r18
 178:	c9 01       	movw	r24, r18
 17a:	c9 01       	movw	r24, r18
 17c:	c9 01       	movw	r24, r18
 17e:	c9 01       	movw	r24, r18
 180:	c9 01       	movw	r24, r18
 182:	c9 01       	movw	r24, r18
 184:	c9 01       	movw	r24, r18
 186:	c9 01       	movw	r24, r18
 188:	c9 01       	movw	r24, r18
 18a:	c9 01       	movw	r24, r18
 18c:	c9 01       	movw	r24, r18
 18e:	c9 01       	movw	r24, r18
 190:	c9 01       	movw	r24, r18
 192:	c9 01       	movw	r24, r18
 194:	c9 01       	movw	r24, r18
 196:	c9 01       	movw	r24, r18
 198:	c9 01       	movw	r24, r18
 19a:	c9 01       	movw	r24, r18
 19c:	c9 01       	movw	r24, r18
 19e:	c9 01       	movw	r24, r18
 1a0:	c9 01       	movw	r24, r18
 1a2:	c9 01       	movw	r24, r18
 1a4:	9f 01       	movw	r18, r30
 1a6:	c9 01       	movw	r24, r18
 1a8:	c9 01       	movw	r24, r18
 1aa:	c9 01       	movw	r24, r18
 1ac:	ab 01       	movw	r20, r22
 1ae:	c9 01       	movw	r24, r18
 1b0:	b7 01       	movw	r22, r14
 1b2:	c3 01       	movw	r24, r6
 1b4:	c9 01       	movw	r24, r18
 1b6:	c9 01       	movw	r24, r18
 1b8:	c9 01       	movw	r24, r18
 1ba:	c9 01       	movw	r24, r18
 1bc:	c9 01       	movw	r24, r18
 1be:	c9 01       	movw	r24, r18
 1c0:	c9 01       	movw	r24, r18
 1c2:	c9 01       	movw	r24, r18
 1c4:	a2 01       	movw	r20, r4
 1c6:	c9 01       	movw	r24, r18
 1c8:	c9 01       	movw	r24, r18
 1ca:	c9 01       	movw	r24, r18
 1cc:	ae 01       	movw	r20, r28
 1ce:	c9 01       	movw	r24, r18
 1d0:	ba 01       	movw	r22, r20
 1d2:	c6 01       	movw	r24, r12

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	e0 ea       	ldi	r30, 0xA0	; 160
 1ec:	f8 e0       	ldi	r31, 0x08	; 8
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a8 30       	cpi	r26, 0x08	; 8
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a8 e0       	ldi	r26, 0x08	; 8
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a4 31       	cpi	r26, 0x14	; 20
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	84 d1       	rcall	.+776    	; 0x518 <main>
 210:	45 c3       	rjmp	.+1674   	; 0x89c <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <KeyPadInit>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void KeyPadInit()
{
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
	DDRK = 0b00001111;		// Use PortK, upper nibble = input (rows), lower nibble = output (columns)
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	2f e0       	ldi	r18, 0x0F	; 15
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
	PORTK |= 0b11110000;	// Enable Pull-up on Row pins (upper nibble)
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	28 e0       	ldi	r18, 0x08	; 8
 22c:	31 e0       	ldi	r19, 0x01	; 1
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	20 6f       	ori	r18, 0xF0	; 240
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
}
 238:	00 00       	nop
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <ColumnScan>:

void ColumnScan()
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	1f 92       	push	r1
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	static int columnCounter = 1;			// Value 1 - 4 represents selected Column
	
	char portBuffer = PORTK & 0b11110000;	// Prevents glitches in bit manipulation, clear all column bits
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	89 83       	std	Y+1, r24	; 0x01
	
	switch (columnCounter)
 256:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 25a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	91 05       	cpc	r25, r1
 262:	a9 f0       	breq	.+42     	; 0x28e <ColumnScan+0x4e>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	91 05       	cpc	r25, r1
 268:	1c f4       	brge	.+6      	; 0x270 <ColumnScan+0x30>
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	39 f0       	breq	.+14     	; 0x27c <ColumnScan+0x3c>
 26e:	2a c0       	rjmp	.+84     	; 0x2c4 <ColumnScan+0x84>
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	91 05       	cpc	r25, r1
 274:	a9 f0       	breq	.+42     	; 0x2a0 <ColumnScan+0x60>
 276:	04 97       	sbiw	r24, 0x04	; 4
 278:	e1 f0       	breq	.+56     	; 0x2b2 <ColumnScan+0x72>
 27a:	24 c0       	rjmp	.+72     	; 0x2c4 <ColumnScan+0x84>
	{
		case 1:
		portBuffer |= 0b00000111;			// reset C1
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	87 60       	ori	r24, 0x07	; 7
 280:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	29 81       	ldd	r18, Y+1	; 0x01
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
		break;
 28c:	1b c0       	rjmp	.+54     	; 0x2c4 <ColumnScan+0x84>
		case 2:
		portBuffer |= 0b00001011;			// reset C2
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	8b 60       	ori	r24, 0x0B	; 11
 292:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 294:	88 e0       	ldi	r24, 0x08	; 8
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	29 81       	ldd	r18, Y+1	; 0x01
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
		break;
 29e:	12 c0       	rjmp	.+36     	; 0x2c4 <ColumnScan+0x84>
		case 3:
		portBuffer |= 0b00001101;			// reset C3
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	8d 60       	ori	r24, 0x0D	; 13
 2a4:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	29 81       	ldd	r18, Y+1	; 0x01
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
		break;
 2b0:	09 c0       	rjmp	.+18     	; 0x2c4 <ColumnScan+0x84>
		case 4:
		portBuffer |= 0b00001110;			// reset C4
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	8e 60       	ori	r24, 0x0E	; 14
 2b6:	89 83       	std	Y+1, r24	; 0x01
		PORTK = portBuffer;
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	29 81       	ldd	r18, Y+1	; 0x01
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
		break;
 2c2:	00 00       	nop
	}
	columnCounter++;
 2c4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2c8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	if (columnCounter > 4)
 2d6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2da:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2de:	05 97       	sbiw	r24, 0x05	; 5
 2e0:	34 f0       	brlt	.+12     	; 0x2ee <ColumnScan+0xae>
	{
		columnCounter = 1;					// Reset back to first Column
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 2ee:	00 00       	nop
 2f0:	0f 90       	pop	r0
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <DecodeKey>:

char DecodeKey(char data)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	1f 92       	push	r1
 2fe:	1f 92       	push	r1
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	8a 83       	std	Y+2, r24	; 0x02
	char key;
	switch (data)
 306:	8a 81       	ldd	r24, Y+2	; 0x02
 308:	88 2f       	mov	r24, r24
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	09 2e       	mov	r0, r25
 30e:	00 0c       	add	r0, r0
 310:	aa 0b       	sbc	r26, r26
 312:	bb 0b       	sbc	r27, r27
 314:	47 e7       	ldi	r20, 0x77	; 119
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	27 e7       	ldi	r18, 0x77	; 119
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	84 1b       	sub	r24, r20
 31e:	95 0b       	sbc	r25, r21
 320:	28 17       	cp	r18, r24
 322:	39 07       	cpc	r19, r25
 324:	b0 f1       	brcs	.+108    	; 0x392 <DecodeKey+0x9a>
 326:	fc 01       	movw	r30, r24
 328:	88 27       	eor	r24, r24
 32a:	ee 58       	subi	r30, 0x8E	; 142
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	8f 4f       	sbci	r24, 0xFF	; 255
 330:	98 c2       	rjmp	.+1328   	; 0x862 <__tablejump2__>
	{
		case 0b01110111: key = '1'; break;
 332:	81 e3       	ldi	r24, 0x31	; 49
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	30 c0       	rjmp	.+96     	; 0x398 <DecodeKey+0xa0>
		case 0b10110111: key = '4'; break;
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	2d c0       	rjmp	.+90     	; 0x398 <DecodeKey+0xa0>
		case 0b11010111: key = '7'; break;
 33e:	87 e3       	ldi	r24, 0x37	; 55
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	2a c0       	rjmp	.+84     	; 0x398 <DecodeKey+0xa0>
		case 0b11100111: key = '*'; break;
 344:	8a e2       	ldi	r24, 0x2A	; 42
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	27 c0       	rjmp	.+78     	; 0x398 <DecodeKey+0xa0>
		case 0b01111011: key = '2'; break;
 34a:	82 e3       	ldi	r24, 0x32	; 50
 34c:	89 83       	std	Y+1, r24	; 0x01
 34e:	24 c0       	rjmp	.+72     	; 0x398 <DecodeKey+0xa0>
		case 0b10111011: key = '5'; break;
 350:	85 e3       	ldi	r24, 0x35	; 53
 352:	89 83       	std	Y+1, r24	; 0x01
 354:	21 c0       	rjmp	.+66     	; 0x398 <DecodeKey+0xa0>
		case 0b11011011: key = '8'; break;
 356:	88 e3       	ldi	r24, 0x38	; 56
 358:	89 83       	std	Y+1, r24	; 0x01
 35a:	1e c0       	rjmp	.+60     	; 0x398 <DecodeKey+0xa0>
		case 0b11101011: key = '0'; break;
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	1b c0       	rjmp	.+54     	; 0x398 <DecodeKey+0xa0>
		case 0b01111101: key = '3'; break;
 362:	83 e3       	ldi	r24, 0x33	; 51
 364:	89 83       	std	Y+1, r24	; 0x01
 366:	18 c0       	rjmp	.+48     	; 0x398 <DecodeKey+0xa0>
		case 0b10111101: key = '6'; break;
 368:	86 e3       	ldi	r24, 0x36	; 54
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	15 c0       	rjmp	.+42     	; 0x398 <DecodeKey+0xa0>
		case 0b11011101: key = '9'; break;
 36e:	89 e3       	ldi	r24, 0x39	; 57
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	12 c0       	rjmp	.+36     	; 0x398 <DecodeKey+0xa0>
		case 0b11101101: key = '#'; break;
 374:	83 e2       	ldi	r24, 0x23	; 35
 376:	89 83       	std	Y+1, r24	; 0x01
 378:	0f c0       	rjmp	.+30     	; 0x398 <DecodeKey+0xa0>
		case 0b01111110: key = 'A'; break;
 37a:	81 e4       	ldi	r24, 0x41	; 65
 37c:	89 83       	std	Y+1, r24	; 0x01
 37e:	0c c0       	rjmp	.+24     	; 0x398 <DecodeKey+0xa0>
		case 0b10111110: key = 'B'; break;
 380:	82 e4       	ldi	r24, 0x42	; 66
 382:	89 83       	std	Y+1, r24	; 0x01
 384:	09 c0       	rjmp	.+18     	; 0x398 <DecodeKey+0xa0>
		case 0b11011110: key = 'C'; break;
 386:	83 e4       	ldi	r24, 0x43	; 67
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	06 c0       	rjmp	.+12     	; 0x398 <DecodeKey+0xa0>
		case 0b11101110: key = 'D'; break;
 38c:	84 e4       	ldi	r24, 0x44	; 68
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	03 c0       	rjmp	.+6      	; 0x398 <DecodeKey+0xa0>
		default:         key = '.'; break;
 392:	8e e2       	ldi	r24, 0x2E	; 46
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	00 00       	nop
	}
	return key;
 398:	89 81       	ldd	r24, Y+1	; 0x01
}
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <ReadRows>:

char ReadRows()
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
	char pinRead = PINK;
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	89 83       	std	Y+1, r24	; 0x01
	if (pinRead < 0xF0)			// test for a row line going low
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	80 3f       	cpi	r24, 0xF0	; 240
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <ReadRows+0x20>
	{
		return DecodeKey(pinRead);
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	9b df       	rcall	.-202    	; 0x2f8 <DecodeKey>
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <ReadRows+0x22>
	}
	return '.';
 3c4:	8e e2       	ldi	r24, 0x2E	; 46
}
 3c6:	0f 90       	pop	r0
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <DisplayKey>:



void DisplayKey(char data)
{
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	2f 97       	sbiw	r28, 0x0f	; 15
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	8f 87       	std	Y+15, r24	; 0x0f
	if (data != '.')
 3e4:	8f 85       	ldd	r24, Y+15	; 0x0f
 3e6:	8e 32       	cpi	r24, 0x2E	; 46
 3e8:	09 f4       	brne	.+2      	; 0x3ec <DisplayKey+0x1e>
 3ea:	70 c0       	rjmp	.+224    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	{
		ReceiveChar(data);
 3ec:	8f 85       	ldd	r24, Y+15	; 0x0f
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	76 d0       	rcall	.+236    	; 0x4e0 <ReceiveChar>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	a8 ec       	ldi	r26, 0xC8	; 200
 3fa:	b3 e4       	ldi	r27, 0x43	; 67
 3fc:	89 83       	std	Y+1, r24	; 0x01
 3fe:	9a 83       	std	Y+2, r25	; 0x02
 400:	ab 83       	std	Y+3, r26	; 0x03
 402:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	4a e7       	ldi	r20, 0x7A	; 122
 40a:	55 e4       	ldi	r21, 0x45	; 69
 40c:	69 81       	ldd	r22, Y+1	; 0x01
 40e:	7a 81       	ldd	r23, Y+2	; 0x02
 410:	8b 81       	ldd	r24, Y+3	; 0x03
 412:	9c 81       	ldd	r25, Y+4	; 0x04
 414:	9b d1       	rcall	.+822    	; 0x74c <__mulsf3>
 416:	dc 01       	movw	r26, r24
 418:	cb 01       	movw	r24, r22
 41a:	8d 83       	std	Y+5, r24	; 0x05
 41c:	9e 83       	std	Y+6, r25	; 0x06
 41e:	af 83       	std	Y+7, r26	; 0x07
 420:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e8       	ldi	r20, 0x80	; 128
 428:	5f e3       	ldi	r21, 0x3F	; 63
 42a:	6d 81       	ldd	r22, Y+5	; 0x05
 42c:	7e 81       	ldd	r23, Y+6	; 0x06
 42e:	8f 81       	ldd	r24, Y+7	; 0x07
 430:	98 85       	ldd	r25, Y+8	; 0x08
 432:	0b d1       	rcall	.+534    	; 0x64a <__cmpsf2>
 434:	88 23       	and	r24, r24
 436:	2c f4       	brge	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		__ticks = 1;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	9a 87       	std	Y+10, r25	; 0x0a
 43e:	89 87       	std	Y+9, r24	; 0x09
 440:	3b c0       	rjmp	.+118    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	else if (__tmp > 65535)
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	3f ef       	ldi	r19, 0xFF	; 255
 446:	4f e7       	ldi	r20, 0x7F	; 127
 448:	57 e4       	ldi	r21, 0x47	; 71
 44a:	6d 81       	ldd	r22, Y+5	; 0x05
 44c:	7e 81       	ldd	r23, Y+6	; 0x06
 44e:	8f 81       	ldd	r24, Y+7	; 0x07
 450:	98 85       	ldd	r25, Y+8	; 0x08
 452:	78 d1       	rcall	.+752    	; 0x744 <__gesf2>
 454:	18 16       	cp	r1, r24
 456:	3c f5       	brge	.+78     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	40 e2       	ldi	r20, 0x20	; 32
 45e:	51 e4       	ldi	r21, 0x41	; 65
 460:	69 81       	ldd	r22, Y+1	; 0x01
 462:	7a 81       	ldd	r23, Y+2	; 0x02
 464:	8b 81       	ldd	r24, Y+3	; 0x03
 466:	9c 81       	ldd	r25, Y+4	; 0x04
 468:	71 d1       	rcall	.+738    	; 0x74c <__mulsf3>
 46a:	dc 01       	movw	r26, r24
 46c:	cb 01       	movw	r24, r22
 46e:	bc 01       	movw	r22, r24
 470:	cd 01       	movw	r24, r26
 472:	ef d0       	rcall	.+478    	; 0x652 <__fixunssfsi>
 474:	dc 01       	movw	r26, r24
 476:	cb 01       	movw	r24, r22
 478:	9a 87       	std	Y+10, r25	; 0x0a
 47a:	89 87       	std	Y+9, r24	; 0x09
 47c:	0f c0       	rjmp	.+30     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 47e:	80 e9       	ldi	r24, 0x90	; 144
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	9c 87       	std	Y+12, r25	; 0x0c
 484:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 486:	8b 85       	ldd	r24, Y+11	; 0x0b
 488:	9c 85       	ldd	r25, Y+12	; 0x0c
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48e:	9c 87       	std	Y+12, r25	; 0x0c
 490:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 492:	89 85       	ldd	r24, Y+9	; 0x09
 494:	9a 85       	ldd	r25, Y+10	; 0x0a
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	9a 87       	std	Y+10, r25	; 0x0a
 49a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 49c:	89 85       	ldd	r24, Y+9	; 0x09
 49e:	9a 85       	ldd	r25, Y+10	; 0x0a
 4a0:	89 2b       	or	r24, r25
		//printf("%c", data);
		_delay_ms(400);
	}
}
 4a2:	69 f7       	brne	.-38     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4a4:	13 c0       	rjmp	.+38     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4a6:	6d 81       	ldd	r22, Y+5	; 0x05
 4a8:	7e 81       	ldd	r23, Y+6	; 0x06
 4aa:	8f 81       	ldd	r24, Y+7	; 0x07
 4ac:	98 85       	ldd	r25, Y+8	; 0x08
 4ae:	d1 d0       	rcall	.+418    	; 0x652 <__fixunssfsi>
 4b0:	dc 01       	movw	r26, r24
 4b2:	cb 01       	movw	r24, r22
 4b4:	9a 87       	std	Y+10, r25	; 0x0a
 4b6:	89 87       	std	Y+9, r24	; 0x09
 4b8:	89 85       	ldd	r24, Y+9	; 0x09
 4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 4bc:	9e 87       	std	Y+14, r25	; 0x0e
 4be:	8d 87       	std	Y+13, r24	; 0x0d
 4c0:	8d 85       	ldd	r24, Y+13	; 0x0d
 4c2:	9e 85       	ldd	r25, Y+14	; 0x0e
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4c8:	9e 87       	std	Y+14, r25	; 0x0e
 4ca:	8d 87       	std	Y+13, r24	; 0x0d
 4cc:	00 00       	nop
 4ce:	2f 96       	adiw	r28, 0x0f	; 15
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <ReceiveChar>:
#include <avr/interrupt.h>
#include "Keypad/Keypad.h"
int returncode = 0;

void ReceiveChar(char a)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	1f 92       	push	r1
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	89 83       	std	Y+1, r24	; 0x01
	returncode = PasswordChecker(a);
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	41 d0       	rcall	.+130    	; 0x576 <PasswordChecker>
 4f4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 4f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	//SetLED(returncode);
}
 4fc:	00 00       	nop
 4fe:	0f 90       	pop	r0
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <Init>:


void Init()
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	KeyPadInit();
 50e:	82 de       	rcall	.-764    	; 0x214 <KeyPadInit>
}
 510:	00 00       	nop
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <main>:

int main(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
    Init();
 520:	f2 df       	rcall	.-28     	; 0x506 <Init>
	
    while(1)
    {
	    ColumnScan();
 522:	8e de       	rcall	.-740    	; 0x240 <ColumnScan>
	    DisplayKey(ReadRows());
 524:	3f df       	rcall	.-386    	; 0x3a4 <ReadRows>
 526:	53 df       	rcall	.-346    	; 0x3ce <DisplayKey>
 528:	fc cf       	rjmp	.-8      	; 0x522 <main+0xa>

0000052a <ValidatePassword>:
 52a:	cf 93       	push	r28
    }
 52c:	df 93       	push	r29
char myPassword[] = "1234";
int invalidEntry = 0;
int isValid = false;

bool ValidatePassword(char password[])
{
 52e:	1f 92       	push	r1
 530:	1f 92       	push	r1
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	9a 83       	std	Y+2, r25	; 0x02
 538:	89 83       	std	Y+1, r24	; 0x01
	if (strncmp(password, myPassword, PASSWORD_SIZE) == 0)
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	9a 81       	ldd	r25, Y+2	; 0x02
 53e:	44 e0       	ldi	r20, 0x04	; 4
 540:	50 e0       	ldi	r21, 0x00	; 0
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	72 e0       	ldi	r23, 0x02	; 2
 546:	9c d1       	rcall	.+824    	; 0x880 <strncmp>
 548:	89 2b       	or	r24, r25
 54a:	31 f4       	brne	.+12     	; 0x558 <ValidatePassword+0x2e>
	{
		invalidEntry = 0;
 54c:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <invalidEntry+0x1>
 550:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <invalidEntry>
		return true;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0a c0       	rjmp	.+20     	; 0x56c <ValidatePassword+0x42>
	}
	else
	{
		invalidEntry++;
 558:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <invalidEntry>
 55c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <invalidEntry+0x1>
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <invalidEntry+0x1>
 566:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <invalidEntry>
		return false;
 56a:	80 e0       	ldi	r24, 0x00	; 0
	}
	index = 0;
}
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <PasswordChecker>:

int PasswordChecker(char a)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	1f 92       	push	r1
 57c:	cd b7       	in	r28, 0x3d	; 61
 57e:	de b7       	in	r29, 0x3e	; 62
 580:	89 83       	std	Y+1, r24	; 0x01
	if(a != '#' && a != '*')
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	83 32       	cpi	r24, 0x23	; 35
 586:	41 f0       	breq	.+16     	; 0x598 <PasswordChecker+0x22>
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	8a 32       	cpi	r24, 0x2A	; 42
 58c:	29 f0       	breq	.+10     	; 0x598 <PasswordChecker+0x22>
	{
		Appender(a);
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	3d d0       	rcall	.+122    	; 0x610 <Appender>
}

int PasswordChecker(char a)
{
	if(a != '#' && a != '*')
	{
 596:	38 c0       	rjmp	.+112    	; 0x608 <PasswordChecker+0x92>
		Appender(a);
	}
	else if(a == '*')
 598:	89 81       	ldd	r24, Y+1	; 0x01
 59a:	8a 32       	cpi	r24, 0x2A	; 42
 59c:	41 f4       	brne	.+16     	; 0x5ae <PasswordChecker+0x38>
	{
		memset(password, 0, sizeof(password));
 59e:	44 e0       	ldi	r20, 0x04	; 4
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	70 e0       	ldi	r23, 0x00	; 0
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	63 d1       	rcall	.+710    	; 0x872 <memset>
 5ac:	2d c0       	rjmp	.+90     	; 0x608 <PasswordChecker+0x92>
	}
	else if(a == '#')
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	83 32       	cpi	r24, 0x23	; 35
 5b2:	51 f5       	brne	.+84     	; 0x608 <PasswordChecker+0x92>
	{
		if (invalidEntry >= 3)
 5b4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <invalidEntry>
 5b8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <invalidEntry+0x1>
 5bc:	03 97       	sbiw	r24, 0x03	; 3
 5be:	2c f0       	brlt	.+10     	; 0x5ca <PasswordChecker+0x54>
		{
			return isValid;
 5c0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <isValid>
 5c4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <isValid+0x1>
 5c8:	1f c0       	rjmp	.+62     	; 0x608 <PasswordChecker+0x92>
		}
		else
		{
			isValid = ValidatePassword(password);
 5ca:	80 e1       	ldi	r24, 0x10	; 16
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	ad df       	rcall	.-166    	; 0x52a <ValidatePassword>
 5d0:	88 2f       	mov	r24, r24
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <isValid+0x1>
 5d8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <isValid>
			memset(password, 0, sizeof(password));
 5dc:	44 e0       	ldi	r20, 0x04	; 4
 5de:	50 e0       	ldi	r21, 0x00	; 0
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	80 e1       	ldi	r24, 0x10	; 16
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	44 d1       	rcall	.+648    	; 0x872 <memset>
			if (isValid)
 5ea:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <isValid>
 5ee:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <isValid+0x1>
 5f2:	89 2b       	or	r24, r25
 5f4:	49 f0       	breq	.+18     	; 0x608 <PasswordChecker+0x92>
			{
				invalidEntry = 0;
 5f6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <invalidEntry+0x1>
 5fa:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <invalidEntry>
				return isValid;
 5fe:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <isValid>
 602:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <isValid+0x1>
 606:	00 c0       	rjmp	.+0      	; 0x608 <PasswordChecker+0x92>
			}
		}
	}
}
 608:	0f 90       	pop	r0
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <Appender>:

void Appender(char a)
{
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	1f 92       	push	r1
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	89 83       	std	Y+1, r24	; 0x01
	password[index] = a;
 61c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <index>
 620:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <index+0x1>
 624:	80 5f       	subi	r24, 0xF0	; 240
 626:	9d 4f       	sbci	r25, 0xFD	; 253
 628:	29 81       	ldd	r18, Y+1	; 0x01
 62a:	fc 01       	movw	r30, r24
 62c:	20 83       	st	Z, r18
	index++;
 62e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <index>
 632:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <index+0x1>
 636:	01 96       	adiw	r24, 0x01	; 1
 638:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <index+0x1>
 63c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <index>
}
 640:	00 00       	nop
 642:	0f 90       	pop	r0
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <__cmpsf2>:
 64a:	2f d0       	rcall	.+94     	; 0x6aa <__fp_cmp>
 64c:	08 f4       	brcc	.+2      	; 0x650 <__cmpsf2+0x6>
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	08 95       	ret

00000652 <__fixunssfsi>:
 652:	57 d0       	rcall	.+174    	; 0x702 <__fp_splitA>
 654:	88 f0       	brcs	.+34     	; 0x678 <__fixunssfsi+0x26>
 656:	9f 57       	subi	r25, 0x7F	; 127
 658:	90 f0       	brcs	.+36     	; 0x67e <__fixunssfsi+0x2c>
 65a:	b9 2f       	mov	r27, r25
 65c:	99 27       	eor	r25, r25
 65e:	b7 51       	subi	r27, 0x17	; 23
 660:	a0 f0       	brcs	.+40     	; 0x68a <__fixunssfsi+0x38>
 662:	d1 f0       	breq	.+52     	; 0x698 <__fixunssfsi+0x46>
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	1a f0       	brmi	.+6      	; 0x674 <__fixunssfsi+0x22>
 66e:	ba 95       	dec	r27
 670:	c9 f7       	brne	.-14     	; 0x664 <__fixunssfsi+0x12>
 672:	12 c0       	rjmp	.+36     	; 0x698 <__fixunssfsi+0x46>
 674:	b1 30       	cpi	r27, 0x01	; 1
 676:	81 f0       	breq	.+32     	; 0x698 <__fixunssfsi+0x46>
 678:	5e d0       	rcall	.+188    	; 0x736 <__fp_zero>
 67a:	b1 e0       	ldi	r27, 0x01	; 1
 67c:	08 95       	ret
 67e:	5b c0       	rjmp	.+182    	; 0x736 <__fp_zero>
 680:	67 2f       	mov	r22, r23
 682:	78 2f       	mov	r23, r24
 684:	88 27       	eor	r24, r24
 686:	b8 5f       	subi	r27, 0xF8	; 248
 688:	39 f0       	breq	.+14     	; 0x698 <__fixunssfsi+0x46>
 68a:	b9 3f       	cpi	r27, 0xF9	; 249
 68c:	cc f3       	brlt	.-14     	; 0x680 <__fixunssfsi+0x2e>
 68e:	86 95       	lsr	r24
 690:	77 95       	ror	r23
 692:	67 95       	ror	r22
 694:	b3 95       	inc	r27
 696:	d9 f7       	brne	.-10     	; 0x68e <__fixunssfsi+0x3c>
 698:	3e f4       	brtc	.+14     	; 0x6a8 <__fixunssfsi+0x56>
 69a:	90 95       	com	r25
 69c:	80 95       	com	r24
 69e:	70 95       	com	r23
 6a0:	61 95       	neg	r22
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
 6a4:	8f 4f       	sbci	r24, 0xFF	; 255
 6a6:	9f 4f       	sbci	r25, 0xFF	; 255
 6a8:	08 95       	ret

000006aa <__fp_cmp>:
 6aa:	99 0f       	add	r25, r25
 6ac:	00 08       	sbc	r0, r0
 6ae:	55 0f       	add	r21, r21
 6b0:	aa 0b       	sbc	r26, r26
 6b2:	e0 e8       	ldi	r30, 0x80	; 128
 6b4:	fe ef       	ldi	r31, 0xFE	; 254
 6b6:	16 16       	cp	r1, r22
 6b8:	17 06       	cpc	r1, r23
 6ba:	e8 07       	cpc	r30, r24
 6bc:	f9 07       	cpc	r31, r25
 6be:	c0 f0       	brcs	.+48     	; 0x6f0 <__fp_cmp+0x46>
 6c0:	12 16       	cp	r1, r18
 6c2:	13 06       	cpc	r1, r19
 6c4:	e4 07       	cpc	r30, r20
 6c6:	f5 07       	cpc	r31, r21
 6c8:	98 f0       	brcs	.+38     	; 0x6f0 <__fp_cmp+0x46>
 6ca:	62 1b       	sub	r22, r18
 6cc:	73 0b       	sbc	r23, r19
 6ce:	84 0b       	sbc	r24, r20
 6d0:	95 0b       	sbc	r25, r21
 6d2:	39 f4       	brne	.+14     	; 0x6e2 <__fp_cmp+0x38>
 6d4:	0a 26       	eor	r0, r26
 6d6:	61 f0       	breq	.+24     	; 0x6f0 <__fp_cmp+0x46>
 6d8:	23 2b       	or	r18, r19
 6da:	24 2b       	or	r18, r20
 6dc:	25 2b       	or	r18, r21
 6de:	21 f4       	brne	.+8      	; 0x6e8 <__fp_cmp+0x3e>
 6e0:	08 95       	ret
 6e2:	0a 26       	eor	r0, r26
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <__fp_cmp+0x3e>
 6e6:	a1 40       	sbci	r26, 0x01	; 1
 6e8:	a6 95       	lsr	r26
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	81 1d       	adc	r24, r1
 6ee:	81 1d       	adc	r24, r1
 6f0:	08 95       	ret

000006f2 <__fp_split3>:
 6f2:	57 fd       	sbrc	r21, 7
 6f4:	90 58       	subi	r25, 0x80	; 128
 6f6:	44 0f       	add	r20, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	59 f0       	breq	.+22     	; 0x712 <__fp_splitA+0x10>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	71 f0       	breq	.+28     	; 0x71c <__fp_splitA+0x1a>
 700:	47 95       	ror	r20

00000702 <__fp_splitA>:
 702:	88 0f       	add	r24, r24
 704:	97 fb       	bst	r25, 7
 706:	99 1f       	adc	r25, r25
 708:	61 f0       	breq	.+24     	; 0x722 <__fp_splitA+0x20>
 70a:	9f 3f       	cpi	r25, 0xFF	; 255
 70c:	79 f0       	breq	.+30     	; 0x72c <__fp_splitA+0x2a>
 70e:	87 95       	ror	r24
 710:	08 95       	ret
 712:	12 16       	cp	r1, r18
 714:	13 06       	cpc	r1, r19
 716:	14 06       	cpc	r1, r20
 718:	55 1f       	adc	r21, r21
 71a:	f2 cf       	rjmp	.-28     	; 0x700 <__fp_split3+0xe>
 71c:	46 95       	lsr	r20
 71e:	f1 df       	rcall	.-30     	; 0x702 <__fp_splitA>
 720:	08 c0       	rjmp	.+16     	; 0x732 <__fp_splitA+0x30>
 722:	16 16       	cp	r1, r22
 724:	17 06       	cpc	r1, r23
 726:	18 06       	cpc	r1, r24
 728:	99 1f       	adc	r25, r25
 72a:	f1 cf       	rjmp	.-30     	; 0x70e <__fp_splitA+0xc>
 72c:	86 95       	lsr	r24
 72e:	71 05       	cpc	r23, r1
 730:	61 05       	cpc	r22, r1
 732:	08 94       	sec
 734:	08 95       	ret

00000736 <__fp_zero>:
 736:	e8 94       	clt

00000738 <__fp_szero>:
 738:	bb 27       	eor	r27, r27
 73a:	66 27       	eor	r22, r22
 73c:	77 27       	eor	r23, r23
 73e:	cb 01       	movw	r24, r22
 740:	97 f9       	bld	r25, 7
 742:	08 95       	ret

00000744 <__gesf2>:
 744:	b2 df       	rcall	.-156    	; 0x6aa <__fp_cmp>
 746:	08 f4       	brcc	.+2      	; 0x74a <__gesf2+0x6>
 748:	8f ef       	ldi	r24, 0xFF	; 255
 74a:	08 95       	ret

0000074c <__mulsf3>:
 74c:	0b d0       	rcall	.+22     	; 0x764 <__mulsf3x>
 74e:	78 c0       	rjmp	.+240    	; 0x840 <__fp_round>
 750:	69 d0       	rcall	.+210    	; 0x824 <__fp_pscA>
 752:	28 f0       	brcs	.+10     	; 0x75e <__mulsf3+0x12>
 754:	6e d0       	rcall	.+220    	; 0x832 <__fp_pscB>
 756:	18 f0       	brcs	.+6      	; 0x75e <__mulsf3+0x12>
 758:	95 23       	and	r25, r21
 75a:	09 f0       	breq	.+2      	; 0x75e <__mulsf3+0x12>
 75c:	5a c0       	rjmp	.+180    	; 0x812 <__fp_inf>
 75e:	5f c0       	rjmp	.+190    	; 0x81e <__fp_nan>
 760:	11 24       	eor	r1, r1
 762:	ea cf       	rjmp	.-44     	; 0x738 <__fp_szero>

00000764 <__mulsf3x>:
 764:	c6 df       	rcall	.-116    	; 0x6f2 <__fp_split3>
 766:	a0 f3       	brcs	.-24     	; 0x750 <__mulsf3+0x4>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	d1 f3       	breq	.-12     	; 0x760 <__mulsf3+0x14>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	8a f0       	brmi	.+34     	; 0x7ec <__mulsf3_pse+0x84>
 7ca:	e1 f0       	breq	.+56     	; 0x804 <__mulsf3_pse+0x9c>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	70 f0       	brcs	.+28     	; 0x804 <__mulsf3_pse+0x9c>
 7e8:	14 c0       	rjmp	.+40     	; 0x812 <__fp_inf>
 7ea:	a6 cf       	rjmp	.-180    	; 0x738 <__fp_szero>
 7ec:	5f 3f       	cpi	r21, 0xFF	; 255
 7ee:	ec f3       	brlt	.-6      	; 0x7ea <__mulsf3_pse+0x82>
 7f0:	98 3e       	cpi	r25, 0xE8	; 232
 7f2:	dc f3       	brlt	.-10     	; 0x7ea <__mulsf3_pse+0x82>
 7f4:	86 95       	lsr	r24
 7f6:	77 95       	ror	r23
 7f8:	67 95       	ror	r22
 7fa:	b7 95       	ror	r27
 7fc:	f7 95       	ror	r31
 7fe:	e7 95       	ror	r30
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	c1 f7       	brne	.-16     	; 0x7f4 <__mulsf3_pse+0x8c>
 804:	fe 2b       	or	r31, r30
 806:	88 0f       	add	r24, r24
 808:	91 1d       	adc	r25, r1
 80a:	96 95       	lsr	r25
 80c:	87 95       	ror	r24
 80e:	97 f9       	bld	r25, 7
 810:	08 95       	ret

00000812 <__fp_inf>:
 812:	97 f9       	bld	r25, 7
 814:	9f 67       	ori	r25, 0x7F	; 127
 816:	80 e8       	ldi	r24, 0x80	; 128
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	60 e0       	ldi	r22, 0x00	; 0
 81c:	08 95       	ret

0000081e <__fp_nan>:
 81e:	9f ef       	ldi	r25, 0xFF	; 255
 820:	80 ec       	ldi	r24, 0xC0	; 192
 822:	08 95       	ret

00000824 <__fp_pscA>:
 824:	00 24       	eor	r0, r0
 826:	0a 94       	dec	r0
 828:	16 16       	cp	r1, r22
 82a:	17 06       	cpc	r1, r23
 82c:	18 06       	cpc	r1, r24
 82e:	09 06       	cpc	r0, r25
 830:	08 95       	ret

00000832 <__fp_pscB>:
 832:	00 24       	eor	r0, r0
 834:	0a 94       	dec	r0
 836:	12 16       	cp	r1, r18
 838:	13 06       	cpc	r1, r19
 83a:	14 06       	cpc	r1, r20
 83c:	05 06       	cpc	r0, r21
 83e:	08 95       	ret

00000840 <__fp_round>:
 840:	09 2e       	mov	r0, r25
 842:	03 94       	inc	r0
 844:	00 0c       	add	r0, r0
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0xc>
 848:	88 23       	and	r24, r24
 84a:	52 f0       	brmi	.+20     	; 0x860 <__fp_round+0x20>
 84c:	bb 0f       	add	r27, r27
 84e:	40 f4       	brcc	.+16     	; 0x860 <__fp_round+0x20>
 850:	bf 2b       	or	r27, r31
 852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0x18>
 854:	60 ff       	sbrs	r22, 0
 856:	04 c0       	rjmp	.+8      	; 0x860 <__fp_round+0x20>
 858:	6f 5f       	subi	r22, 0xFF	; 255
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	8f 4f       	sbci	r24, 0xFF	; 255
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <__tablejump2__>:
 862:	ee 0f       	add	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	88 1f       	adc	r24, r24
 868:	8b bf       	out	0x3b, r24	; 59
 86a:	07 90       	elpm	r0, Z+
 86c:	f6 91       	elpm	r31, Z
 86e:	e0 2d       	mov	r30, r0
 870:	19 94       	eijmp

00000872 <memset>:
 872:	dc 01       	movw	r26, r24
 874:	01 c0       	rjmp	.+2      	; 0x878 <memset+0x6>
 876:	6d 93       	st	X+, r22
 878:	41 50       	subi	r20, 0x01	; 1
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	e0 f7       	brcc	.-8      	; 0x876 <memset+0x4>
 87e:	08 95       	ret

00000880 <strncmp>:
 880:	fb 01       	movw	r30, r22
 882:	dc 01       	movw	r26, r24
 884:	41 50       	subi	r20, 0x01	; 1
 886:	50 40       	sbci	r21, 0x00	; 0
 888:	30 f0       	brcs	.+12     	; 0x896 <strncmp+0x16>
 88a:	8d 91       	ld	r24, X+
 88c:	01 90       	ld	r0, Z+
 88e:	80 19       	sub	r24, r0
 890:	19 f4       	brne	.+6      	; 0x898 <strncmp+0x18>
 892:	00 20       	and	r0, r0
 894:	b9 f7       	brne	.-18     	; 0x884 <strncmp+0x4>
 896:	88 1b       	sub	r24, r24
 898:	99 0b       	sbc	r25, r25
 89a:	08 95       	ret

0000089c <_exit>:
 89c:	f8 94       	cli

0000089e <__stop_program>:
 89e:	ff cf       	rjmp	.-2      	; 0x89e <__stop_program>
