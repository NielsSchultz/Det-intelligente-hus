
Det intelligente hus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000004ce  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020c  0080020c  0000056e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012aa  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faa  00000000  00000000  00001952  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a5  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002af  00000000  00000000  0000388a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	78 01       	movw	r14, r16
  e6:	76 01       	movw	r14, r12
  e8:	76 01       	movw	r14, r12
  ea:	76 01       	movw	r14, r12
  ec:	5e 01       	movw	r10, r28
  ee:	76 01       	movw	r14, r12
  f0:	66 01       	movw	r12, r12
  f2:	6e 01       	movw	r12, r28
  f4:	76 01       	movw	r14, r12
  f6:	76 01       	movw	r14, r12
  f8:	76 01       	movw	r14, r12
  fa:	76 01       	movw	r14, r12
  fc:	76 01       	movw	r14, r12
  fe:	76 01       	movw	r14, r12
 100:	76 01       	movw	r14, r12
 102:	76 01       	movw	r14, r12
 104:	76 01       	movw	r14, r12
 106:	76 01       	movw	r14, r12
 108:	76 01       	movw	r14, r12
 10a:	76 01       	movw	r14, r12
 10c:	76 01       	movw	r14, r12
 10e:	76 01       	movw	r14, r12
 110:	76 01       	movw	r14, r12
 112:	76 01       	movw	r14, r12
 114:	76 01       	movw	r14, r12
 116:	76 01       	movw	r14, r12
 118:	76 01       	movw	r14, r12
 11a:	76 01       	movw	r14, r12
 11c:	76 01       	movw	r14, r12
 11e:	76 01       	movw	r14, r12
 120:	76 01       	movw	r14, r12
 122:	76 01       	movw	r14, r12
 124:	76 01       	movw	r14, r12
 126:	76 01       	movw	r14, r12
 128:	76 01       	movw	r14, r12
 12a:	76 01       	movw	r14, r12
 12c:	76 01       	movw	r14, r12
 12e:	76 01       	movw	r14, r12
 130:	76 01       	movw	r14, r12
 132:	76 01       	movw	r14, r12
 134:	76 01       	movw	r14, r12
 136:	76 01       	movw	r14, r12
 138:	76 01       	movw	r14, r12
 13a:	76 01       	movw	r14, r12
 13c:	76 01       	movw	r14, r12
 13e:	76 01       	movw	r14, r12
 140:	76 01       	movw	r14, r12
 142:	76 01       	movw	r14, r12
 144:	76 01       	movw	r14, r12
 146:	76 01       	movw	r14, r12
 148:	76 01       	movw	r14, r12
 14a:	76 01       	movw	r14, r12
 14c:	76 01       	movw	r14, r12
 14e:	76 01       	movw	r14, r12
 150:	76 01       	movw	r14, r12
 152:	76 01       	movw	r14, r12
 154:	76 01       	movw	r14, r12
 156:	76 01       	movw	r14, r12
 158:	76 01       	movw	r14, r12
 15a:	76 01       	movw	r14, r12
 15c:	76 01       	movw	r14, r12
 15e:	76 01       	movw	r14, r12
 160:	76 01       	movw	r14, r12
 162:	76 01       	movw	r14, r12
 164:	58 01       	movw	r10, r16
 166:	76 01       	movw	r14, r12
 168:	76 01       	movw	r14, r12
 16a:	76 01       	movw	r14, r12
 16c:	60 01       	movw	r12, r0
 16e:	76 01       	movw	r14, r12
 170:	68 01       	movw	r12, r16
 172:	70 01       	movw	r14, r0
 174:	76 01       	movw	r14, r12
 176:	76 01       	movw	r14, r12
 178:	76 01       	movw	r14, r12
 17a:	76 01       	movw	r14, r12
 17c:	76 01       	movw	r14, r12
 17e:	76 01       	movw	r14, r12
 180:	76 01       	movw	r14, r12
 182:	76 01       	movw	r14, r12
 184:	76 01       	movw	r14, r12
 186:	76 01       	movw	r14, r12
 188:	76 01       	movw	r14, r12
 18a:	76 01       	movw	r14, r12
 18c:	76 01       	movw	r14, r12
 18e:	76 01       	movw	r14, r12
 190:	76 01       	movw	r14, r12
 192:	76 01       	movw	r14, r12
 194:	76 01       	movw	r14, r12
 196:	76 01       	movw	r14, r12
 198:	76 01       	movw	r14, r12
 19a:	76 01       	movw	r14, r12
 19c:	76 01       	movw	r14, r12
 19e:	76 01       	movw	r14, r12
 1a0:	76 01       	movw	r14, r12
 1a2:	76 01       	movw	r14, r12
 1a4:	5a 01       	movw	r10, r20
 1a6:	76 01       	movw	r14, r12
 1a8:	76 01       	movw	r14, r12
 1aa:	76 01       	movw	r14, r12
 1ac:	62 01       	movw	r12, r4
 1ae:	76 01       	movw	r14, r12
 1b0:	6a 01       	movw	r12, r20
 1b2:	72 01       	movw	r14, r4
 1b4:	76 01       	movw	r14, r12
 1b6:	76 01       	movw	r14, r12
 1b8:	76 01       	movw	r14, r12
 1ba:	76 01       	movw	r14, r12
 1bc:	76 01       	movw	r14, r12
 1be:	76 01       	movw	r14, r12
 1c0:	76 01       	movw	r14, r12
 1c2:	76 01       	movw	r14, r12
 1c4:	5c 01       	movw	r10, r24
 1c6:	76 01       	movw	r14, r12
 1c8:	76 01       	movw	r14, r12
 1ca:	76 01       	movw	r14, r12
 1cc:	64 01       	movw	r12, r8
 1ce:	76 01       	movw	r14, r12
 1d0:	6c 01       	movw	r12, r24
 1d2:	74 01       	movw	r14, r8

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ee ec       	ldi	r30, 0xCE	; 206
 1ec:	f4 e0       	ldi	r31, 0x04	; 4
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	ac 30       	cpi	r26, 0x0C	; 12
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	ac e0       	ldi	r26, 0x0C	; 12
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a6 31       	cpi	r26, 0x16	; 22
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	c5 d0       	rcall	.+394    	; 0x39a <main>
 210:	5c c1       	rjmp	.+696    	; 0x4ca <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <KeyPadInit>:
#include <avr/io.h>
#include <util/delay.h>

void KeyPadInit()
{
	DDRK = 0b00001111;		// Use PortK, upper nibble = input (rows), lower nibble = output (columns)
 214:	8f e0       	ldi	r24, 0x0F	; 15
 216:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	PORTK |= 0b11110000;	// Enable Pull-up on Row pins (upper nibble)
 21a:	e8 e0       	ldi	r30, 0x08	; 8
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	80 81       	ld	r24, Z
 220:	80 6f       	ori	r24, 0xF0	; 240
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <ColumnScan>:

void ColumnScan()
{
	static int columnCounter = 1;			// Value 1 - 4 represents selected Column
	
	char portBuffer = PORTK & 0b11110000;	// Prevents glitches in bit manipulation, clear all column bits
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
 22a:	80 7f       	andi	r24, 0xF0	; 240
	
	switch (columnCounter)
 22c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 230:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 234:	22 30       	cpi	r18, 0x02	; 2
 236:	31 05       	cpc	r19, r1
 238:	81 f0       	breq	.+32     	; 0x25a <ColumnScan+0x34>
 23a:	24 f4       	brge	.+8      	; 0x244 <ColumnScan+0x1e>
 23c:	21 30       	cpi	r18, 0x01	; 1
 23e:	31 05       	cpc	r19, r1
 240:	41 f0       	breq	.+16     	; 0x252 <ColumnScan+0x2c>
 242:	16 c0       	rjmp	.+44     	; 0x270 <ColumnScan+0x4a>
 244:	23 30       	cpi	r18, 0x03	; 3
 246:	31 05       	cpc	r19, r1
 248:	61 f0       	breq	.+24     	; 0x262 <ColumnScan+0x3c>
 24a:	24 30       	cpi	r18, 0x04	; 4
 24c:	31 05       	cpc	r19, r1
 24e:	69 f0       	breq	.+26     	; 0x26a <ColumnScan+0x44>
 250:	0f c0       	rjmp	.+30     	; 0x270 <ColumnScan+0x4a>
	{
		case 1:
		portBuffer |= 0b00000111;			// reset C1
 252:	87 60       	ori	r24, 0x07	; 7
		PORTK = portBuffer;
 254:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		break;
 258:	0b c0       	rjmp	.+22     	; 0x270 <ColumnScan+0x4a>
		case 2:
		portBuffer |= 0b00001011;			// reset C2
 25a:	8b 60       	ori	r24, 0x0B	; 11
		PORTK = portBuffer;
 25c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		break;
 260:	07 c0       	rjmp	.+14     	; 0x270 <ColumnScan+0x4a>
		case 3:
		portBuffer |= 0b00001101;			// reset C3
 262:	8d 60       	ori	r24, 0x0D	; 13
		PORTK = portBuffer;
 264:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		break;
 268:	03 c0       	rjmp	.+6      	; 0x270 <ColumnScan+0x4a>
		case 4:
		portBuffer |= 0b00001110;			// reset C4
 26a:	8e 60       	ori	r24, 0x0E	; 14
		PORTK = portBuffer;
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		break;
	}
	columnCounter++;
 270:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 274:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
	if (columnCounter > 4)
 27a:	85 30       	cpi	r24, 0x05	; 5
 27c:	91 05       	cpc	r25, r1
 27e:	2c f4       	brge	.+10     	; 0x28a <ColumnScan+0x64>
		case 4:
		portBuffer |= 0b00001110;			// reset C4
		PORTK = portBuffer;
		break;
	}
	columnCounter++;
 280:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 284:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 288:	08 95       	ret
	if (columnCounter > 4)
	{
		columnCounter = 1;					// Reset back to first Column
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 292:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 296:	08 95       	ret

00000298 <DecodeKey>:
}

char DecodeKey(char data)
{
	char key;
	switch (data)
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	fc 01       	movw	r30, r24
 29c:	e7 57       	subi	r30, 0x77	; 119
 29e:	f1 09       	sbc	r31, r1
 2a0:	e8 37       	cpi	r30, 0x78	; 120
 2a2:	f1 05       	cpc	r31, r1
 2a4:	18 f5       	brcc	.+70     	; 0x2ec <DecodeKey+0x54>
 2a6:	88 27       	eor	r24, r24
 2a8:	ee 58       	subi	r30, 0x8E	; 142
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	8f 4f       	sbci	r24, 0xFF	; 255
 2ae:	f7 c0       	rjmp	.+494    	; 0x49e <__tablejump2__>
	{
		case 0b01110111: key = '1'; break;
		case 0b10110111: key = '4'; break;
 2b0:	84 e3       	ldi	r24, 0x34	; 52
 2b2:	08 95       	ret
		case 0b11010111: key = '7'; break;
 2b4:	87 e3       	ldi	r24, 0x37	; 55
 2b6:	08 95       	ret
		case 0b11100111: key = '*'; break;
 2b8:	8a e2       	ldi	r24, 0x2A	; 42
 2ba:	08 95       	ret
		case 0b01111011: key = '2'; break;
 2bc:	82 e3       	ldi	r24, 0x32	; 50
 2be:	08 95       	ret
		case 0b10111011: key = '5'; break;
 2c0:	85 e3       	ldi	r24, 0x35	; 53
 2c2:	08 95       	ret
		case 0b11011011: key = '8'; break;
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	08 95       	ret
		case 0b11101011: key = '0'; break;
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	08 95       	ret
		case 0b01111101: key = '3'; break;
 2cc:	83 e3       	ldi	r24, 0x33	; 51
 2ce:	08 95       	ret
		case 0b10111101: key = '6'; break;
 2d0:	86 e3       	ldi	r24, 0x36	; 54
 2d2:	08 95       	ret
		case 0b11011101: key = '9'; break;
 2d4:	89 e3       	ldi	r24, 0x39	; 57
 2d6:	08 95       	ret
		case 0b11101101: key = '#'; break;
 2d8:	83 e2       	ldi	r24, 0x23	; 35
 2da:	08 95       	ret
		case 0b01111110: key = 'A'; break;
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	08 95       	ret
		case 0b10111110: key = 'B'; break;
 2e0:	82 e4       	ldi	r24, 0x42	; 66
 2e2:	08 95       	ret
		case 0b11011110: key = 'C'; break;
 2e4:	83 e4       	ldi	r24, 0x43	; 67
 2e6:	08 95       	ret
		case 0b11101110: key = 'D'; break;
 2e8:	84 e4       	ldi	r24, 0x44	; 68
 2ea:	08 95       	ret
		default:         key = '.'; break;
 2ec:	8e e2       	ldi	r24, 0x2E	; 46
 2ee:	08 95       	ret
char DecodeKey(char data)
{
	char key;
	switch (data)
	{
		case 0b01110111: key = '1'; break;
 2f0:	81 e3       	ldi	r24, 0x31	; 49
		case 0b11011110: key = 'C'; break;
		case 0b11101110: key = 'D'; break;
		default:         key = '.'; break;
	}
	return key;
}
 2f2:	08 95       	ret

000002f4 <ReadRows>:

char ReadRows()
{
	char pinRead = PINK;
 2f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
	if (pinRead < 0xF0)			// test for a row line going low
 2f8:	80 3f       	cpi	r24, 0xF0	; 240
 2fa:	10 f4       	brcc	.+4      	; 0x300 <ReadRows+0xc>
	{
		return DecodeKey(pinRead);
 2fc:	cd cf       	rjmp	.-102    	; 0x298 <DecodeKey>
 2fe:	08 95       	ret
	}
	return '.';
 300:	8e e2       	ldi	r24, 0x2E	; 46
}
 302:	08 95       	ret

00000304 <DisplayKey>:



void DisplayKey(char data)
{
	if (data != '.')
 304:	8e 32       	cpi	r24, 0x2E	; 46
 306:	59 f0       	breq	.+22     	; 0x31e <DisplayKey+0x1a>
	{
		ReceiveChar(data);
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	40 d0       	rcall	.+128    	; 0x38c <ReceiveChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	87 e8       	ldi	r24, 0x87	; 135
 310:	93 e1       	ldi	r25, 0x13	; 19
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <DisplayKey+0xe>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <DisplayKey+0x18>
 31c:	00 00       	nop
 31e:	08 95       	ret

00000320 <SetLED>:
int green = 80;
int blue = 0;
void SetLED(int code)
{
	
	if (code == 3)
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	91 05       	cpc	r25, r1
 324:	79 f4       	brne	.+30     	; 0x344 <SetLED+0x24>
	{
		//Unlocked, set LED to green
		red = 0;
 326:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <red+0x1>
 32a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <red>
		green = 255;
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <green+0x1>
 336:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <green>
		blue = 0;
 33a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
 33e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 342:	08 95       	ret
	}
	else if(code == 2)
 344:	02 97       	sbiw	r24, 0x02	; 2
 346:	81 f4       	brne	.+32     	; 0x368 <SetLED+0x48>
	{
		//Locked, set LED to yellow
		red = 120;
 348:	88 e7       	ldi	r24, 0x78	; 120
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <red+0x1>
 350:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <red>
		green = 80;
 354:	80 e5       	ldi	r24, 0x50	; 80
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <green+0x1>
 35c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <green>
		blue = 0;
 360:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
 364:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 368:	08 95       	ret

0000036a <LEDInit>:
}

void LEDInit()
{
	// Compare Output Mode: Fast PWM Mode: Clear OC0A on Compare Match, set OC0A at BOTTOM, non-inverting mode (Table 16-3)
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1)| (1<<COM1C1);
 36a:	e0 e8       	ldi	r30, 0x80	; 128
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	88 6a       	ori	r24, 0xA8	; 168
 372:	80 83       	st	Z, r24
	
	//Waveform Generation Mode: Mode 3 Fast PWM: WGM0 = 1, WGM1 = 1 (Table 16-8)
	TCCR1A |= (1<<WGM10) | (1<<WGM12);
 374:	80 81       	ld	r24, Z
 376:	89 60       	ori	r24, 0x09	; 9
 378:	80 83       	st	Z, r24
	
	// Clock Select Bit: clk/64 prescaling: CS = 011 : CS01 = 1, CS00 = 1 (Table 16-9), frekv. = 980Hz
	TCCR1B |= (1<<CS11) | (1<<CS10);		// datasheet 16.9.2
 37a:	e1 e8       	ldi	r30, 0x81	; 129
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	83 60       	ori	r24, 0x03	; 3
 382:	80 83       	st	Z, r24
	
	// Set output to OC0A = PB7, see datasheet 16.9.4 and Arduino MEGA pin configuration: (pin 13), same as LED
	DDRB |= (1<<PB7) | (1<<PB6) | (1<<PB5);
 384:	84 b1       	in	r24, 0x04	; 4
 386:	80 6e       	ori	r24, 0xE0	; 224
 388:	84 b9       	out	0x04, r24	; 4
 38a:	08 95       	ret

0000038c <ReceiveChar>:


void ReceiveChar(char a)
{
	int returncode;
	returncode = PasswordChecker(a); // Checks char and returns a code dependant on the character
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	54 d0       	rcall	.+168    	; 0x438 <PasswordChecker>
	
	SetLED(returncode); // Sets LED according to the return code
 390:	c7 cf       	rjmp	.-114    	; 0x320 <SetLED>
 392:	08 95       	ret

00000394 <Init>:
 394:	3f df       	rcall	.-386    	; 0x214 <KeyPadInit>


void Init()
{
	KeyPadInit();
	LEDInit();
 396:	e9 cf       	rjmp	.-46     	; 0x36a <LEDInit>
 398:	08 95       	ret

0000039a <main>:
 39a:	fc df       	rcall	.-8      	; 0x394 <Init>
{
    Init();
	
    while(1)
    {
		OCR1C = red;		// Red
 39c:	0f 2e       	mov	r0, r31
 39e:	fc e8       	ldi	r31, 0x8C	; 140
 3a0:	ef 2e       	mov	r14, r31
 3a2:	f1 2c       	mov	r15, r1
 3a4:	f0 2d       	mov	r31, r0
		OCR1B = green;			// Green
 3a6:	0a e8       	ldi	r16, 0x8A	; 138
 3a8:	10 e0       	ldi	r17, 0x00	; 0
		OCR1A = blue;		// Blue
 3aa:	c8 e8       	ldi	r28, 0x88	; 136
 3ac:	d0 e0       	ldi	r29, 0x00	; 0
{
    Init();
	
    while(1)
    {
		OCR1C = red;		// Red
 3ae:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <red>
 3b2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <red+0x1>
 3b6:	f7 01       	movw	r30, r14
 3b8:	91 83       	std	Z+1, r25	; 0x01
 3ba:	80 83       	st	Z, r24
		OCR1B = green;			// Green
 3bc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <green>
 3c0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <green+0x1>
 3c4:	f8 01       	movw	r30, r16
 3c6:	91 83       	std	Z+1, r25	; 0x01
 3c8:	80 83       	st	Z, r24
		OCR1A = blue;		// Blue
 3ca:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 3ce:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 3d2:	99 83       	std	Y+1, r25	; 0x01
		//Key
	    ColumnScan();
 3d4:	88 83       	st	Y, r24
	    DisplayKey(ReadRows());
 3d6:	27 df       	rcall	.-434    	; 0x226 <ColumnScan>
 3d8:	8d df       	rcall	.-230    	; 0x2f4 <ReadRows>
 3da:	94 df       	rcall	.-216    	; 0x304 <DisplayKey>
 3dc:	e8 cf       	rjmp	.-48     	; 0x3ae <main+0x14>

000003de <ValidatePassword>:
int invalidEntry = 0; // Starts at 0 goes up by 1 for every invalid entry


int ValidatePassword(char password[])
{
	index = 0;
 3de:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <index+0x1>
 3e2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <index>
	if (strncmp(password, myPassword, PASSWORD_SIZE) == 0) // Compares the actual password with the input password array
 3e6:	44 e0       	ldi	r20, 0x04	; 4
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	66 e0       	ldi	r22, 0x06	; 6
 3ec:	72 e0       	ldi	r23, 0x02	; 2
 3ee:	5f d0       	rcall	.+190    	; 0x4ae <strncmp>
 3f0:	89 2b       	or	r24, r25
 3f2:	39 f4       	brne	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	{
		invalidEntry = 0;
 3f4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <invalidEntry+0x1>
 3f8:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <invalidEntry>
		return 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret
	}
	else
	{
		invalidEntry++;
 402:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <invalidEntry>
 406:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <invalidEntry+0x1>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <invalidEntry+0x1>
 410:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <invalidEntry>
		return 0;
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 418:	08 95       	ret

0000041a <Appender>:
	}
}

void Appender(char a)
{
	password[index] = a;
 41a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <index>
 41e:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <index+0x1>
 422:	f9 01       	movw	r30, r18
 424:	ee 5e       	subi	r30, 0xEE	; 238
 426:	fd 4f       	sbci	r31, 0xFD	; 253
 428:	80 83       	st	Z, r24
	index++;
 42a:	2f 5f       	subi	r18, 0xFF	; 255
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
 42e:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <index+0x1>
 432:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <index>
 436:	08 95       	ret

00000438 <PasswordChecker>:
	}
}

int PasswordChecker(char a)
{
	if(a != '#' && a != '*') //Appends if not a function key(# or *)
 438:	83 32       	cpi	r24, 0x23	; 35
 43a:	89 f0       	breq	.+34     	; 0x45e <PasswordChecker+0x26>
 43c:	8a 32       	cpi	r24, 0x2A	; 42
 43e:	19 f0       	breq	.+6      	; 0x446 <PasswordChecker+0xe>
	{
		Appender(a); // Appends char 'a' to the password array
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	eb df       	rcall	.-42     	; 0x41a <Appender>
}

int PasswordChecker(char a)
{
	if(a != '#' && a != '*') //Appends if not a function key(# or *)
	{
 444:	25 c0       	rjmp	.+74     	; 0x490 <PasswordChecker+0x58>
		Appender(a); // Appends char 'a' to the password array
	}
	else if(a == '*') // * Function resets your password array
	{
		memset(password, 0, sizeof(password)); // Function to set all bits to 0
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	e2 e1       	ldi	r30, 0x12	; 18
 44a:	f2 e0       	ldi	r31, 0x02	; 2
 44c:	df 01       	movw	r26, r30
 44e:	1d 92       	st	X+, r1
 450:	8a 95       	dec	r24
 452:	e9 f7       	brne	.-6      	; 0x44e <PasswordChecker+0x16>
		index = 0;
 454:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <index+0x1>
 458:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <index>
 45c:	19 c0       	rjmp	.+50     	; 0x490 <PasswordChecker+0x58>
	}
	else if(a == '#') // # Function submits your current password array, use else if so it's easier to add another function key later
	{
		if (invalidEntry >= 3) // Trigger alarm after x amount of invalid entries
 45e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <invalidEntry>
 462:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <invalidEntry+0x1>
 466:	03 97       	sbiw	r24, 0x03	; 3
 468:	a4 f4       	brge	.+40     	; 0x492 <PasswordChecker+0x5a>
		{
			return ALARM;
		}
		else
		{
			int isValid = ValidatePassword(password); // Sends password for validation
 46a:	82 e1       	ldi	r24, 0x12	; 18
 46c:	92 e0       	ldi	r25, 0x02	; 2
 46e:	b7 df       	rcall	.-146    	; 0x3de <ValidatePassword>
			memset(password, 0, sizeof(password));
 470:	24 e0       	ldi	r18, 0x04	; 4
 472:	e2 e1       	ldi	r30, 0x12	; 18
 474:	f2 e0       	ldi	r31, 0x02	; 2
 476:	df 01       	movw	r26, r30
 478:	1d 92       	st	X+, r1
 47a:	2a 95       	dec	r18
 47c:	e9 f7       	brne	.-6      	; 0x478 <PasswordChecker+0x40>
			index = 0;
 47e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <index+0x1>
 482:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <index>
			if (isValid == 1)
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	39 f0       	breq	.+14     	; 0x498 <PasswordChecker+0x60>
			{
				return UNLOCKED;
			}
			else
			{
				return LOCKED;
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	08 95       	ret
			}
		}
	}
}
 490:	08 95       	ret
	}
	else if(a == '#') // # Function submits your current password array, use else if so it's easier to add another function key later
	{
		if (invalidEntry >= 3) // Trigger alarm after x amount of invalid entries
		{
			return ALARM;
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	08 95       	ret
			int isValid = ValidatePassword(password); // Sends password for validation
			memset(password, 0, sizeof(password));
			index = 0;
			if (isValid == 1)
			{
				return UNLOCKED;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
			{
				return LOCKED;
			}
		}
	}
}
 49c:	08 95       	ret

0000049e <__tablejump2__>:
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	88 1f       	adc	r24, r24
 4a4:	8b bf       	out	0x3b, r24	; 59
 4a6:	07 90       	elpm	r0, Z+
 4a8:	f6 91       	elpm	r31, Z
 4aa:	e0 2d       	mov	r30, r0
 4ac:	19 94       	eijmp

000004ae <strncmp>:
 4ae:	fb 01       	movw	r30, r22
 4b0:	dc 01       	movw	r26, r24
 4b2:	41 50       	subi	r20, 0x01	; 1
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	30 f0       	brcs	.+12     	; 0x4c4 <strncmp+0x16>
 4b8:	8d 91       	ld	r24, X+
 4ba:	01 90       	ld	r0, Z+
 4bc:	80 19       	sub	r24, r0
 4be:	19 f4       	brne	.+6      	; 0x4c6 <strncmp+0x18>
 4c0:	00 20       	and	r0, r0
 4c2:	b9 f7       	brne	.-18     	; 0x4b2 <strncmp+0x4>
 4c4:	88 1b       	sub	r24, r24
 4c6:	99 0b       	sbc	r25, r25
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
